// Package vfrogapi provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen version v1.11.0 DO NOT EDIT.
package vfrogapi

import (
	"time"
)

const (
	APITokenScopes = "APIToken.Scopes"
)

// Defines values for CountriesMode.
const (
	AllowList CountriesMode = "allow_list"
	BlockList CountriesMode = "block_list"
)

// Defines values for DeviceName.
const (
	Desktop DeviceName = "desktop"
	Mobile  DeviceName = "mobile"
)

// Defines values for PerformanceBudgetMetric.
const (
	PerformanceBudgetMetricBigPayloadsTotalBytes    PerformanceBudgetMetric = "big_payloads.total_bytes"
	PerformanceBudgetMetricCumulativeLayoutShift    PerformanceBudgetMetric = "cumulative_layout_shift"
	PerformanceBudgetMetricFirstContentfulPaintMs   PerformanceBudgetMetric = "first_contentful_paint_ms"
	PerformanceBudgetMetricFirstMeaningfulPaintMs   PerformanceBudgetMetric = "first_meaningful_paint_ms"
	PerformanceBudgetMetricInteractiveMs            PerformanceBudgetMetric = "interactive_ms"
	PerformanceBudgetMetricLargestContentfulPaintMs PerformanceBudgetMetric = "largest_contentful_paint_ms"
	PerformanceBudgetMetricMaxPotentialFidMs        PerformanceBudgetMetric = "max_potential_fid_ms"
	PerformanceBudgetMetricServerResponseTimeMs     PerformanceBudgetMetric = "server_response_time_ms"
	PerformanceBudgetMetricSpeedIndexMs             PerformanceBudgetMetric = "speed_index_ms"
	PerformanceBudgetMetricTotalBlockingTimeMs      PerformanceBudgetMetric = "total_blocking_time_ms"
)

// Defines values for PerformanceBudgetMode.
const (
	Above PerformanceBudgetMode = "above"
	Below PerformanceBudgetMode = "below"
)

// Basic auth credentials to configure
type BasicAuth struct {
	Password string `json:"password"`
	Username string `json:"username"`
}

// BigPayloads defines model for BigPayloads.
type BigPayloads struct {
	Payloads   []Payload `json:"payloads"`
	TotalBytes int32     `json:"total_bytes"`
}

// Countries defines model for Countries.
type Countries struct {
	List []Country `json:"list"`

	// How to handle the 'list'. If 'allow_list' than new countries is allowed, but the ones on the list. If 'block_list' then all countries are allowd.
	Mode CountriesMode `json:"mode"`
}

// How to handle the 'list'. If 'allow_list' than new countries is allowed, but the ones on the list. If 'block_list' then all countries are allowd.
type CountriesMode string

// Country defines model for Country.
type Country struct {
	Code string  `json:"code"`
	Name *string `json:"name,omitempty"`
}

// CumulativeLayoutShift defines model for CumulativeLayoutShift.
type CumulativeLayoutShift struct {
	Elements *[]Element `json:"elements,omitempty"`
	Value    float32    `json:"value"`
}

// Device defines model for Device.
type Device struct {
	Name DeviceName `json:"name"`
}

// DeviceName defines model for Device.Name.
type DeviceName string

// Element defines model for Element.
type Element struct {
	Selector string  `json:"selector"`
	Snippet  *string `json:"snippet,omitempty"`
}

// Error defines model for Error.
type Error struct {
	Code    *int32 `json:"code,omitempty"`
	Message string `json:"message"`
}

// Additional headers to configure on the request. Mostly used for authentication
type ExtraHeadersConfig = []Header

// FirstContentfulPaint defines model for FirstContentfulPaint.
type FirstContentfulPaint struct {
	Elements *[]Element `json:"elements,omitempty"`
	ValueMs  int32      `json:"value_ms"`
}

// Header defines model for Header.
type Header struct {
	Header string `json:"header"`
	Value  string `json:"value"`
}

// Additional http request configurations
type HttpConfig struct {
	// Basic auth credentials to configure
	BasicAuth *BasicAuth `json:"basic_auth,omitempty"`

	// Additional headers to configure on the request. Mostly used for authentication
	ExtraHeaders *ExtraHeadersConfig `json:"extra_headers,omitempty"`
}

// LargestContentfulPaint defines model for LargestContentfulPaint.
type LargestContentfulPaint struct {
	Element        Element `json:"element"`
	ImagePreloaded *bool   `json:"image_preloaded,omitempty"`
	LazyLoaded     *bool   `json:"lazy_loaded,omitempty"`
	ValueMs        int32   `json:"value_ms"`
}

// VitalFrog will run performance report on the manual configured paths
type ManualPathSelection struct {
	Mode  string   `json:"mode"`
	Paths []string `json:"paths"`
}

// NetworkRequest defines model for NetworkRequest.
type NetworkRequest struct {
	LoadTimeMs  int32  `json:"load_time_ms"`
	SizeByte    int32  `json:"size_byte"`
	StartTimeMs int32  `json:"start_time_ms"`
	Url         string `json:"url"`
}

// Payload defines model for Payload.
type Payload struct {
	TotalBytes int32  `json:"total_bytes"`
	Url        string `json:"url"`
}

// PerformanceBudget defines model for PerformanceBudget.
type PerformanceBudget struct {
	// If metric is above/below (depending on 'mode'). Return an error
	Error  int32                   `json:"error"`
	Metric PerformanceBudgetMetric `json:"metric"`

	// What to alert on. Above or below the threshold
	Mode *PerformanceBudgetMode `json:"mode,omitempty"`

	// If metric is above/below (depending on 'mode'). Return a warning
	Warning int32 `json:"warning"`
}

// PerformanceBudgetMetric defines model for PerformanceBudget.Metric.
type PerformanceBudgetMetric string

// What to alert on. Above or below the threshold
type PerformanceBudgetMode string

// PerformanceBudgets defines model for PerformanceBudgets.
type PerformanceBudgets struct {
	Budgets []PerformanceBudget `json:"budgets"`

	// Flags if this performance budget is the default one to use for this account
	Default     bool   `json:"default"`
	Description string `json:"description"`
	Id          int32  `json:"id"`
}

// PerformanceBudgetsList defines model for PerformanceBudgetsList.
type PerformanceBudgetsList = []PerformanceBudgets

// PerformanceReport defines model for PerformanceReport.
type PerformanceReport struct {
	BigPayloads            BigPayloads            `json:"big_payloads"`
	Country                Country                `json:"country"`
	CumulativeLayoutShift  CumulativeLayoutShift  `json:"cumulative_layout_shift"`
	Device                 Device                 `json:"device"`
	FirstContentfulPaint   FirstContentfulPaint   `json:"first_contentful_paint"`
	FirstMeaningfulPaintMs int32                  `json:"first_meaningful_paint_ms"`
	Id                     int32                  `json:"id"`
	InteractiveMs          int32                  `json:"interactive_ms"`
	LargestContentfulPaint LargestContentfulPaint `json:"largest_contentful_paint"`
	MaxPotentialFidMs      int32                  `json:"max_potential_fid_ms"`
	NetworkRequests        []NetworkRequest       `json:"network_requests"`
	Path                   string                 `json:"path"`
	ServerResponseTimeMs   int32                  `json:"server_response_time_ms"`
	SpeedIndexMs           int32                  `json:"speed_index_ms"`
	TotalBlockingTimeMs    int32                  `json:"total_blocking_time_ms"`
}

// Report defines model for Report.
type Report struct {
	Data     []PerformanceReport `json:"data"`
	Metadata ReportMetadata      `json:"metadata"`
}

// ReportConfig defines model for ReportConfig.
type ReportConfig struct {
	// Component of you software we are testing. Helps to later find cross repo problems.
	Component *string `json:"Component,omitempty"`

	// Version of you software we are testing. Helps for later tracing of problems.
	Version   *string    `json:"Version,omitempty"`
	Countries *Countries `json:"countries,omitempty"`

	// What devices to test. If not set falls back to testing two devices "desktop" & "mobile"
	Devices *[]Device `json:"devices,omitempty"`

	// Additional http request configurations
	Http *HttpConfig `json:"http,omitempty"`

	// What performance budget to use. If none configured the default VitalFrog performance budgets will be used
	PerformanceBudgetsId *int32 `json:"performance_budgets_id,omitempty"`
	Target               Target `json:"target"`
}

// ReportMetadata defines model for ReportMetadata.
type ReportMetadata struct {
	Config ReportConfig `json:"config"`

	// Cost in credits for this report
	Cost     int32      `json:"cost"`
	Created  time.Time  `json:"created"`
	Finished *time.Time `json:"finished,omitempty"`
	Uuid     string     `json:"uuid"`
}

// Target defines model for Target.
type Target struct {
	Host   string      `json:"host"`
	Paths  interface{} `json:"paths"`
	Scheme *string     `json:"scheme,omitempty"`
}

// PostReportsJSONBody defines parameters for PostReports.
type PostReportsJSONBody = ReportConfig

// PostReportsJSONRequestBody defines body for PostReports for application/json ContentType.
type PostReportsJSONRequestBody = PostReportsJSONBody
